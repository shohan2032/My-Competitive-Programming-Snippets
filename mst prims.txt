#include <bits/stdc++.h>

using namespace std;

//Debug Function-->works for vector,map,set(dbg(stl_name)),,arrar(dbg(array_name,range))
template < typename F, typename S >ostream& operator << ( ostream& os, const pair< F, S > & p ) {return os << "(" << p.first << ", " << p.second << ")";}
template < typename T >ostream &operator << ( ostream & os, const vector< T > &v ) {os << "{";for(auto it = v.begin(); it != v.end(); ++it) {if( it != v.begin() ) os << ", ";os << *it;}return os << "}";}
template < typename T >ostream &operator << ( ostream & os, const set< T > &v ) {os << "[";for(auto it = v.begin(); it != v.end(); ++it) {if( it != v.begin() ) os << ", ";os << *it;}return os << "]";}
template < typename T >ostream &operator << ( ostream & os, const multiset< T > &v ) {os << "[";for(auto it = v.begin(); it != v.end(); ++it) {if( it != v.begin() ) os << ", ";os << *it;}return os << "]";}
template < typename F, typename S >ostream &operator << ( ostream & os, const map< F, S > &v ) {os << "[";for(auto it = v.begin(); it != v.end(); ++it) {if( it != v.begin() ) os << ", ";os << it -> first << " = " << it -> second ;}return os << "]";}
#define dbg(args...) do {cerr << #args << " : "; arif(args); } while(0)
clock_t tStart = clock();
#define timeStamp dbg("Execution Time: ", (double)(clock() - tStart)/CLOCKS_PER_SEC)
void arif () {cerr << endl;}
template <typename T>void arif( T a[], int n ) {for(int i = 0; i < n; ++i) cerr << a[i] << ' ';cerr << endl;}
template <typename T, typename ... hello>void arif( T arg, const hello &... rest) {cerr << arg << ' ';arif(rest...);}

#define db long long
#define ll long long
#define int ll
#define vi vector<int>
#define vs vector<string>
#define vpi vector<pair<int, int>>
#define vpd vector<pair<double, double>>
#define vps vector<pair<string, string>>
#define mp(x, y) make_pair(x, y)
#define pb(x) push_back(x)
#define pp(x) pop_back(x)
#define fr(cont) for (auto &i : (cont))
#define all(cont) cont.begin(), cont.end()
#define rall(cont) cont.rbegin(), cont.rend()
#define mo(a, b) (((a) % (b)) + (b)) % (b)
#define endl '\n'

/*
    The time complexity of Prim's algorithm is O((V + E) log V) 
    because:
    1)Extracting the minimum vertex from the priority queue takes O(log V) and is done ùëâ times.
    2)Each edge may result in an update in the priority queue, and updating or inserting into the priority queue takes O(log V). This update happens at most ùê∏ times.
    So,Total Time Complexity = O(VlogV)+O(Elog(V)) = O((V+E) logV)
*/

// Prim's Algorithm to find the MST.
int primMST(int n, vector<vector<pair<int, int>>>& graph) {
    // Priority queue (min-heap) to select the vertex with the smallest key (weight)
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;//{weight,vertex}

    // Key values used to pick minimum weight edge
    vector<int> key(n + 1, INT_MAX);

    // To represent the included nodes in MST
    vector<bool> inMST(n + 1, false);

    // Start from vertex 1
    key[1] = 0;
    pq.push({0, 1});  // (key, node)

    int mstWeight = 0;

    while (!pq.empty()) {
        int u = pq.top().second;   // Extract the vertex with minimum key
        pq.pop();

        // If the node is already in MST, skip it
        if (inMST[u]) continue;

        // Include this vertex in MST
        inMST[u] = true;
        mstWeight += key[u];

        // Process all adjacent vertices of u
        for (auto& neighbor : graph[u]) {
            int v = neighbor.first;
            int weight = neighbor.second;

            // If v is not in MST and weight of u-v is smaller than the current key of v
            if (!inMST[v] && weight < key[v]) {
                key[v] = weight;
                pq.push({key[v], v});
            }
        }
    }

    return mstWeight;
}

void solve()
{
  /*
    1. Think Greedy
    2. Think Brute Force
    3. Think solution in reverse order
    4. Think DP [ check constraints carefully ]
    5. Check base cases for DP and prove solution for Greedy
    6. Think Graph
  */ 
    int n, m; // n = number of nodes, m = number of edges
    cin >> n >> m;

    // Graph represented as an adjacency list (node, weight)
    vector<vector<pair<int, int>>> graph(n + 1);

    // Input all edges
    for (int i = 0; i < m; i++) {
        int u, v, w;
        cin >> u >> v >> w;
        graph[u].push_back({v, w});
        graph[v].push_back({u, w});
    }

    // Call Prim's algorithm to find the MST weight
    int mstWeight = primMST(n, graph);

    // Output the total weight of the MST
    cout << "Minimum Spanning Tree weight: " << mstWeight << endl;
}   

int32_t main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    // auto st = clock();
    int t = 1;
    // cin >> t;
    for(int i = 1;i <= t;i++)
    {
        // cout << "Case " << i << ": ";
        solve();
    }

    // cerr << 1.0*(clock()-st)/CLOCKS_PER_SEC << endl;
    return 0;
}
/*Problem_link

*/