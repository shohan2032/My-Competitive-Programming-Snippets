#include <bits/stdc++.h>

using namespace std;

//Debug Function-->works for vector,map,set(dbg(stl_name)),,arrar(dbg(array_name,range))
template < typename F, typename S >ostream& operator << ( ostream& os, const pair< F, S > & p ) {return os << "(" << p.first << ", " << p.second << ")";}
template < typename T >ostream &operator << ( ostream & os, const vector< T > &v ) {os << "{";for(auto it = v.begin(); it != v.end(); ++it) {if( it != v.begin() ) os << ", ";os << *it;}return os << "}";}
template < typename T >ostream &operator << ( ostream & os, const set< T > &v ) {os << "[";for(auto it = v.begin(); it != v.end(); ++it) {if( it != v.begin() ) os << ", ";os << *it;}return os << "]";}
template < typename T >ostream &operator << ( ostream & os, const multiset< T > &v ) {os << "[";for(auto it = v.begin(); it != v.end(); ++it) {if( it != v.begin() ) os << ", ";os << *it;}return os << "]";}
template < typename F, typename S >ostream &operator << ( ostream & os, const map< F, S > &v ) {os << "[";for(auto it = v.begin(); it != v.end(); ++it) {if( it != v.begin() ) os << ", ";os << it -> first << " = " << it -> second ;}return os << "]";}
#define dbg(args...) do {cerr << #args << " : "; arif(args); } while(0)
clock_t tStart = clock();
#define timeStamp dbg("Execution Time: ", (double)(clock() - tStart)/CLOCKS_PER_SEC)
void arif () {cerr << endl;}
template <typename T>void arif( T a[], int n ) {for(int i = 0; i < n; ++i) cerr << a[i] << ' ';cerr << endl;}
template <typename T, typename ... hello>void arif( T arg, const hello &... rest) {cerr << arg << ' ';arif(rest...);}

#define db long long
#define ll long long
#define int ll
#define vi vector<int>
#define vs vector<string>
#define vpi vector<pair<int, int>>
#define vpd vector<pair<double, double>>
#define vps vector<pair<string, string>>
#define mp(x, y) make_pair(x, y)
#define pb(x) push_back(x)
#define pp(x) pop_back(x)
#define fr(cont) for (auto &i : (cont))
#define all(cont) cont.begin(), cont.end()
#define rall(cont) cont.rbegin(), cont.rend()
#define mo(a, b) (((a) % (b)) + (b)) % (b)
#define endl '\n'

vector<int> z_function(string s) {
    int n = s.size();
    vector<int> z(n);
    z[0] = 0;//or n
    int l = 0, r = 0;
    for(int i = 1; i < n; i++) {
        if(i < r) {
            z[i] = min(r - i, z[i - l]);
        }
        while(i + z[i] < n && s[z[i]] == s[i + z[i]]) {
            z[i]++;
        }
        if(i + z[i] > r) {
            l = i;
            r = i + z[i];
        }
    }
    return z;
}

map<int,priority_queue<int,vi,greater<int>>> pre;
map<int,priority_queue<int>>suf;
int f;
void make_pre(string p,string s)
{
  string ns = p+'#'+s;
  int n = ns.size();
  vector<int>z = z_function(ns);
  // dbg(z);
  int j = 0;
  for(int i = p.size()+1;i < n;i++,j++)
  {
    if(z[i])
      pre[z[i]].push(j);
    if(z[i] == p.size())
      f = 1;
  }
}

void make_suf(string p,string s)
{
  string ns = p+'#'+s;
  int n = ns.size();
  vector<int>z = z_function(ns);
  // dbg(z);
  int j = s.size()-1;
  for(int i = p.size()+1;i < n;i++,j--)
  {
    if(z[i])
      suf[z[i]].push(j-z[i]+1);
  }
}

void solve()
{
  /*
    1. Think Greedy
    2. Think Brute Force
    3. Think solution in reverse order
    4. Think DP [ check constraints carefully ]
    5. Check base cases for DP and prove solution for Greedy
    6. Think Graph
  */ 
  string s;
  cin>> s;
  string rs = s;
  reverse(all(rs));
  int q;
  cin>> q;
  int ans = 0;
  while(q--)
  {
    string p,pp;
    cin>> p;
    if(p.size() == 1)
      continue;
    f = 0;
    pre.clear();
    suf.clear();
    make_pre(p,s);
    if(f)
    {
      ans++;
      continue;
    }
    reverse(all(p));
    make_suf(p,rs);
    fr(pre)
    {
      int pre_len = i.first;
      int pre_lb = i.second.top();
      int suf_len = p.size()-i.first;
      int ff = 0;
      fr(suf)
      {
        if(i.first >= suf_len)
        {
          int suf_ub = i.second.top();
          if(pre_lb+pre_len<=suf_ub+(i.first-suf_len))
          {
            ff = 1;
            ans++;
            break;
          }
        }
      }
      if(ff)
        break;
    }
  }
  cout << ans << endl;
}   

int32_t main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    // auto st = clock();
    int t = 1;
    // cin >> t;
    while (t--)
        solve();

    // cerr << 1.0*(clock()-st)/CLOCKS_PER_SEC << endl;
    return 0;
}
/*Problem_link
  https://codeforces.com/contest/149/problem/E
  https://codeforces.com/problemset/problem/432/D hashing+z_function
  https://codeforces.com/problemset/problem/149/E Good+hard
  https://www.hackerrank.com/challenges/string-similarity/problem?isFullScreen=true
  https://codeforces.com/contest/2010/problem/C2
*/